{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "53e362bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 10.0.2 build v10.0.2rc0 (mac64[x86])\n",
      "\n",
      "CPU model: Intel(R) Core(TM) i5-8257U CPU @ 1.40GHz\n",
      "Thread count: 4 physical cores, 8 logical processors, using up to 8 threads\n",
      "\n",
      "Optimize a model with 370 rows, 211 columns and 1010 nonzeros\n",
      "Model fingerprint: 0x234a4324\n",
      "Variable types: 31 continuous, 180 integer (180 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+05]\n",
      "  Objective range  [1e+00, 1e+00]\n",
      "  Bounds range     [1e+00, 1e+00]\n",
      "  RHS range        [1e+00, 1e+05]\n",
      "Found heuristic solution: objective 23.0000000\n",
      "Presolve removed 30 rows and 30 columns\n",
      "Presolve time: 0.01s\n",
      "Presolved: 340 rows, 181 columns, 980 nonzeros\n",
      "Variable types: 31 continuous, 150 integer (150 binary)\n",
      "\n",
      "Root relaxation: objective 1.200000e+01, 68 iterations, 0.00 seconds (0.00 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0   12.00000    0    8   23.00000   12.00000  47.8%     -    0s\n",
      "     0     0   15.00000    0    8   23.00000   15.00000  34.8%     -    0s\n",
      "H    0     0                      17.0000000   15.00000  11.8%     -    0s\n",
      "     0     0   15.00000    0    8   17.00000   15.00000  11.8%     -    0s\n",
      "\n",
      "Explored 1 nodes (115 simplex iterations) in 0.07 seconds (0.00 work units)\n",
      "Thread count was 8 (of 8 available processors)\n",
      "\n",
      "Solution count 2: 17 23 \n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective 1.700000000000e+01, best bound 1.700000000000e+01, gap 0.0000%\n",
      "Warning: variable name \"Maximum Span\" has a space\n",
      "Warning: to let Gurobi read it back, use rlp format\n",
      "start_time[0,0] 3\n",
      "start_time[0,1] 1\n",
      "start_time[0,2] 6\n",
      "start_time[0,3] 0\n",
      "start_time[0,4] 13\n",
      "start_time[0,5] 0\n",
      "start_time[1,0] 6\n",
      "start_time[1,1] 0\n",
      "start_time[1,2] 0\n",
      "start_time[1,3] 1\n",
      "start_time[1,4] 0\n",
      "start_time[1,5] 0\n",
      "start_time[2,0] 0\n",
      "start_time[2,1] 0\n",
      "start_time[2,2] 0\n",
      "start_time[2,3] 7\n",
      "start_time[2,4] 0\n",
      "start_time[2,5] 3\n",
      "start_time[3,0] 0\n",
      "start_time[3,1] 0\n",
      "start_time[3,2] 16\n",
      "start_time[3,3] 0\n",
      "start_time[3,4] 3\n",
      "start_time[3,5] 0\n",
      "start_time[4,0] 0\n",
      "start_time[4,1] 3\n",
      "start_time[4,2] 13\n",
      "start_time[4,3] 0\n",
      "start_time[4,4] 0\n",
      "start_time[4,5] 7\n",
      "disjunction[0,0,0] 0\n",
      "disjunction[0,0,1] 1\n",
      "disjunction[0,0,2] 0\n",
      "disjunction[0,0,3] 1\n",
      "disjunction[0,0,4] 0\n",
      "disjunction[0,0,5] 1\n",
      "disjunction[0,1,0] 0\n",
      "disjunction[0,1,1] 0\n",
      "disjunction[0,1,2] 0\n",
      "disjunction[0,1,3] 1\n",
      "disjunction[0,1,4] 0\n",
      "disjunction[0,1,5] 1\n",
      "disjunction[0,2,0] 1\n",
      "disjunction[0,2,1] 1\n",
      "disjunction[0,2,2] 0\n",
      "disjunction[0,2,3] 1\n",
      "disjunction[0,2,4] 0\n",
      "disjunction[0,2,5] 1\n",
      "disjunction[0,3,0] 0\n",
      "disjunction[0,3,1] 0\n",
      "disjunction[0,3,2] 0\n",
      "disjunction[0,3,3] 0\n",
      "disjunction[0,3,4] 0\n",
      "disjunction[0,3,5] 0\n",
      "disjunction[0,4,0] 1\n",
      "disjunction[0,4,1] 1\n",
      "disjunction[0,4,2] 1\n",
      "disjunction[0,4,3] 1\n",
      "disjunction[0,4,4] 0\n",
      "disjunction[0,4,5] 1\n",
      "disjunction[0,5,0] 0\n",
      "disjunction[0,5,1] 0\n",
      "disjunction[0,5,2] 0\n",
      "disjunction[0,5,3] 0\n",
      "disjunction[0,5,4] 0\n",
      "disjunction[0,5,5] 0\n",
      "disjunction[1,0,0] 0\n",
      "disjunction[1,0,1] 1\n",
      "disjunction[1,0,2] 1\n",
      "disjunction[1,0,3] 1\n",
      "disjunction[1,0,4] 1\n",
      "disjunction[1,0,5] 1\n",
      "disjunction[1,1,0] 0\n",
      "disjunction[1,1,1] 0\n",
      "disjunction[1,1,2] 1\n",
      "disjunction[1,1,3] 0\n",
      "disjunction[1,1,4] 1\n",
      "disjunction[1,1,5] 1\n",
      "disjunction[1,2,0] 0\n",
      "disjunction[1,2,1] 0\n",
      "disjunction[1,2,2] 0\n",
      "disjunction[1,2,3] 0\n",
      "disjunction[1,2,4] 0\n",
      "disjunction[1,2,5] 0\n",
      "disjunction[1,3,0] 0\n",
      "disjunction[1,3,1] 1\n",
      "disjunction[1,3,2] 1\n",
      "disjunction[1,3,3] 0\n",
      "disjunction[1,3,4] 1\n",
      "disjunction[1,3,5] 1\n",
      "disjunction[1,4,0] 0\n",
      "disjunction[1,4,1] 0\n",
      "disjunction[1,4,2] 0\n",
      "disjunction[1,4,3] 0\n",
      "disjunction[1,4,4] 0\n",
      "disjunction[1,4,5] 0\n",
      "disjunction[1,5,0] 0\n",
      "disjunction[1,5,1] 0\n",
      "disjunction[1,5,2] 0\n",
      "disjunction[1,5,3] 0\n",
      "disjunction[1,5,4] 0\n",
      "disjunction[1,5,5] 0\n",
      "disjunction[2,0,0] 0\n",
      "disjunction[2,0,1] 0\n",
      "disjunction[2,0,2] 0\n",
      "disjunction[2,0,3] 0\n",
      "disjunction[2,0,4] 0\n",
      "disjunction[2,0,5] 0\n",
      "disjunction[2,1,0] 0\n",
      "disjunction[2,1,1] 0\n",
      "disjunction[2,1,2] 0\n",
      "disjunction[2,1,3] 0\n",
      "disjunction[2,1,4] 0\n",
      "disjunction[2,1,5] 0\n",
      "disjunction[2,2,0] 0\n",
      "disjunction[2,2,1] 0\n",
      "disjunction[2,2,2] 0\n",
      "disjunction[2,2,3] 0\n",
      "disjunction[2,2,4] 0\n",
      "disjunction[2,2,5] 0\n",
      "disjunction[2,3,0] 1\n",
      "disjunction[2,3,1] 1\n",
      "disjunction[2,3,2] 1\n",
      "disjunction[2,3,3] 0\n",
      "disjunction[2,3,4] 1\n",
      "disjunction[2,3,5] 1\n",
      "disjunction[2,4,0] 1\n",
      "disjunction[2,4,1] 1\n",
      "disjunction[2,4,2] 1\n",
      "disjunction[2,4,3] 0\n",
      "disjunction[2,4,4] 0\n",
      "disjunction[2,4,5] 0\n",
      "disjunction[2,5,0] 1\n",
      "disjunction[2,5,1] 1\n",
      "disjunction[2,5,2] 1\n",
      "disjunction[2,5,3] 0\n",
      "disjunction[2,5,4] 1\n",
      "disjunction[2,5,5] 0\n",
      "disjunction[3,0,0] 0\n",
      "disjunction[3,0,1] 1\n",
      "disjunction[3,0,2] 0\n",
      "disjunction[3,0,3] 1\n",
      "disjunction[3,0,4] 0\n",
      "disjunction[3,0,5] 1\n",
      "disjunction[3,1,0] 0\n",
      "disjunction[3,1,1] 0\n",
      "disjunction[3,1,2] 0\n",
      "disjunction[3,1,3] 0\n",
      "disjunction[3,1,4] 0\n",
      "disjunction[3,1,5] 0\n",
      "disjunction[3,2,0] 1\n",
      "disjunction[3,2,1] 1\n",
      "disjunction[3,2,2] 0\n",
      "disjunction[3,2,3] 1\n",
      "disjunction[3,2,4] 1\n",
      "disjunction[3,2,5] 1\n",
      "disjunction[3,3,0] 0\n",
      "disjunction[3,3,1] 0\n",
      "disjunction[3,3,2] 0\n",
      "disjunction[3,3,3] 0\n",
      "disjunction[3,3,4] 0\n",
      "disjunction[3,3,5] 0\n",
      "disjunction[3,4,0] 1\n",
      "disjunction[3,4,1] 1\n",
      "disjunction[3,4,2] 0\n",
      "disjunction[3,4,3] 1\n",
      "disjunction[3,4,4] 0\n",
      "disjunction[3,4,5] 1\n",
      "disjunction[3,5,0] 0\n",
      "disjunction[3,5,1] 0\n",
      "disjunction[3,5,2] 0\n",
      "disjunction[3,5,3] 0\n",
      "disjunction[3,5,4] 0\n",
      "disjunction[3,5,5] 0\n",
      "disjunction[4,0,0] 0\n",
      "disjunction[4,0,1] 0\n",
      "disjunction[4,0,2] 0\n",
      "disjunction[4,0,3] 0\n",
      "disjunction[4,0,4] 0\n",
      "disjunction[4,0,5] 0\n",
      "disjunction[4,1,0] 1\n",
      "disjunction[4,1,1] 0\n",
      "disjunction[4,1,2] 0\n",
      "disjunction[4,1,3] 1\n",
      "disjunction[4,1,4] 1\n",
      "disjunction[4,1,5] 0\n",
      "disjunction[4,2,0] 1\n",
      "disjunction[4,2,1] 1\n",
      "disjunction[4,2,2] 0\n",
      "disjunction[4,2,3] 1\n",
      "disjunction[4,2,4] 1\n",
      "disjunction[4,2,5] 1\n",
      "disjunction[4,3,0] 0\n",
      "disjunction[4,3,1] 0\n",
      "disjunction[4,3,2] 0\n",
      "disjunction[4,3,3] 0\n",
      "disjunction[4,3,4] 0\n",
      "disjunction[4,3,5] 0\n",
      "disjunction[4,4,0] 0\n",
      "disjunction[4,4,1] 0\n",
      "disjunction[4,4,2] 0\n",
      "disjunction[4,4,3] 0\n",
      "disjunction[4,4,4] 0\n",
      "disjunction[4,4,5] 0\n",
      "disjunction[4,5,0] 1\n",
      "disjunction[4,5,1] 1\n",
      "disjunction[4,5,2] 0\n",
      "disjunction[4,5,3] 1\n",
      "disjunction[4,5,4] 1\n",
      "disjunction[4,5,5] 0\n",
      "Maximum Span 17\n",
      "17.0\n"
     ]
    }
   ],
   "source": [
    "import gurobipy as gp\n",
    "from gurobipy import GRB\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# Create a new model\n",
    "PwC = gp.Model (\"PwT-seqIP\")\n",
    "\n",
    "# processing times of jobs\n",
    "p= [[3,2,7,0,3,0],[5,1,0,4,0,0],[0,0,0,4,3,4],[3,0,1,0,6,0],[0,4,3,0,0,6]]\n",
    "    \n",
    "# # of machines and jobs\n",
    "m = 5\n",
    "n= 6\n",
    "\n",
    "# range of jobs and machines\n",
    "jobs = range(n)\n",
    "machines = range(m)\n",
    "\n",
    "# big-M\n",
    "M=100000\n",
    "\n",
    "# Create variables\n",
    "y = PwC.addVars(machines, jobs, vtype = GRB.CONTINUOUS, name = \"start_time\")\n",
    "x = PwC.addVars(machines, jobs, jobs, vtype = GRB.BINARY, name = \"disjunction\")\n",
    "Cmax=PwC.addVar(vtype=GRB.CONTINUOUS, name=\"Maximum Span\")\n",
    "\n",
    "# Set objective\n",
    "PwC.setObjective(Cmax, GRB.MINIMIZE)\n",
    "\n",
    "# Constraints   \n",
    "PwC.addConstrs((Cmax >=y[i,j]+p[i][j] for i in machines for j in jobs))\n",
    "PwC.addConstrs((y[i,j]>= 0 for i in machines for j in jobs))\n",
    "PwC.addConstrs((y[i,j]-y[i,l]+M*(1-x[i,j,l])>= p[i][l] for i in machines for j in jobs for l in jobs if j!=l))\n",
    "PwC.addConstrs((y[i,l]-y[i,j]+M*x[i,j,l]>= p[i][j] for i in machines for j in jobs for l in jobs if j!=l))\n",
    "PwC.addConstr((y[0,0]-y[3,0]>=3))\n",
    "PwC.addConstr((y[1,0]-y[0,0]>=3))\n",
    "PwC.addConstr((y[0,1]-y[1,1]>=1))\n",
    "PwC.addConstr((y[4,1]-y[0,1]>=2))\n",
    "PwC.addConstr((y[4,2]-y[0,2]>=7))\n",
    "PwC.addConstr((y[3,2]-y[4,2]>=3))\n",
    "PwC.addConstr((y[2,3]-y[1,3]>=4))\n",
    "PwC.addConstr((y[3,4]-y[2,4]>=3))\n",
    "PwC.addConstr((y[0,4]-y[3,4]>=6))\n",
    "PwC.addConstr((y[4,5]-y[2,5]>=4))\n",
    "    \n",
    "# Optimize model\n",
    "PwC.optimize()\n",
    "PwC.write(\"PwT-seqIP.lp\")\n",
    "\n",
    "# print optimal solutions\n",
    "for v in PwC.getVars ():\n",
    "    print ('%s %g' % (v.varName , v.x))\n",
    "objective = PwC.getObjective()\n",
    "print(objective.getValue())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3eed0282",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gurobi Optimizer version 10.0.2 build v10.0.2rc0 (mac64[x86])\n",
      "\n",
      "CPU model: Intel(R) Core(TM) i5-8257U CPU @ 1.40GHz\n",
      "Thread count: 4 physical cores, 8 logical processors, using up to 8 threads\n",
      "\n",
      "Optimize a model with 60 rows, 37 columns and 147 nonzeros\n",
      "Model fingerprint: 0xf4b4f120\n",
      "Variable types: 10 continuous, 27 integer (27 binary)\n",
      "Coefficient statistics:\n",
      "  Matrix range     [1e+00, 1e+04]\n",
      "  Objective range  [1e+00, 1e+00]\n",
      "  Bounds range     [1e+00, 1e+00]\n",
      "  RHS range        [3e+00, 1e+04]\n",
      "Found heuristic solution: objective 45.0000000\n",
      "Presolve removed 9 rows and 9 columns\n",
      "Presolve time: 0.00s\n",
      "Presolved: 51 rows, 28 columns, 138 nonzeros\n",
      "Variable types: 10 continuous, 18 integer (18 binary)\n",
      "\n",
      "Root relaxation: objective 2.300000e+01, 14 iterations, 0.00 seconds (0.00 work units)\n",
      "\n",
      "    Nodes    |    Current Node    |     Objective Bounds      |     Work\n",
      " Expl Unexpl |  Obj  Depth IntInf | Incumbent    BestBd   Gap | It/Node Time\n",
      "\n",
      "     0     0   23.00000    0    8   45.00000   23.00000  48.9%     -    0s\n",
      "     0     0   30.00000    0    2   45.00000   30.00000  33.3%     -    0s\n",
      "H    0     0                      34.0000000   30.00000  11.8%     -    0s\n",
      "     0     0   30.00000    0    2   34.00000   30.00000  11.8%     -    0s\n",
      "H    0     1                      33.0000000   30.00000  9.09%     -    0s\n",
      "\n",
      "Explored 1 nodes (37 simplex iterations) in 0.09 seconds (0.00 work units)\n",
      "Thread count was 8 (of 8 available processors)\n",
      "\n",
      "Solution count 3: 33 34 45 \n",
      "\n",
      "Optimal solution found (tolerance 1.00e-04)\n",
      "Best objective 3.300000000000e+01, best bound 3.300000000000e+01, gap 0.0000%\n",
      "Warning: variable name \"Maximum Span\" has a space\n",
      "Warning: to let Gurobi read it back, use rlp format\n",
      "start_time[0,0] 5\n",
      "start_time[0,1] 26\n",
      "start_time[0,2] 14\n",
      "start_time[1,0] 27\n",
      "start_time[1,1] 4\n",
      "start_time[1,2] 8\n",
      "start_time[2,0] 19\n",
      "start_time[2,1] 8\n",
      "start_time[2,2] 0\n",
      "disjunction[0,0,0] 0\n",
      "disjunction[0,0,1] 0\n",
      "disjunction[0,0,2] 0\n",
      "disjunction[0,1,0] 1\n",
      "disjunction[0,1,1] 0\n",
      "disjunction[0,1,2] 1\n",
      "disjunction[0,2,0] 1\n",
      "disjunction[0,2,1] 0\n",
      "disjunction[0,2,2] 0\n",
      "disjunction[1,0,0] 0\n",
      "disjunction[1,0,1] 1\n",
      "disjunction[1,0,2] 1\n",
      "disjunction[1,1,0] 0\n",
      "disjunction[1,1,1] 0\n",
      "disjunction[1,1,2] 0\n",
      "disjunction[1,2,0] 0\n",
      "disjunction[1,2,1] 1\n",
      "disjunction[1,2,2] 0\n",
      "disjunction[2,0,0] 0\n",
      "disjunction[2,0,1] 1\n",
      "disjunction[2,0,2] 1\n",
      "disjunction[2,1,0] 0\n",
      "disjunction[2,1,1] 0\n",
      "disjunction[2,1,2] 1\n",
      "disjunction[2,2,0] 0\n",
      "disjunction[2,2,1] 0\n",
      "disjunction[2,2,2] 0\n",
      "Maximum Span 33\n",
      "33.0\n"
     ]
    }
   ],
   "source": [
    "#Homework 1.6\n",
    "import gurobipy as gp\n",
    "from gurobipy import GRB\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# Create a new model\n",
    "PwC = gp.Model (\"PwT-seqIP\")\n",
    "\n",
    "# processing times of jobs\n",
    "p= [[3,7,9],[6,4,6],[8,11,8]]\n",
    "    \n",
    "# # of machines and jobs\n",
    "m = 3\n",
    "n=3\n",
    "# range of jobs and machines\n",
    "jobs = range(n)\n",
    "machines = range(m)\n",
    "\n",
    "# big-M\n",
    "M=10000\n",
    "\n",
    "# Create variables\n",
    "y = PwC.addVars(machines, jobs, vtype = GRB.CONTINUOUS, name = \"start_time\")\n",
    "x = PwC.addVars(machines, jobs, jobs, vtype = GRB.BINARY, name = \"disjunction\")\n",
    "Cmax=PwC.addVar(vtype=GRB.CONTINUOUS, name=\"Maximum Span\")\n",
    "\n",
    "# Set objective\n",
    "PwC.setObjective(Cmax, GRB.MINIMIZE)\n",
    "\n",
    "# Constraints   \n",
    "PwC.addConstrs((Cmax >=y[i,j]+p[i][j] for i in machines for j in jobs))\n",
    "PwC.addConstrs((y[i,j]>= 0 for i in machines for j in jobs))\n",
    "PwC.addConstrs((y[i,j]-y[i,l]+M*(1-x[i,j,l])>= p[i][l] for i in machines for j in jobs for l in jobs if j!=l))\n",
    "PwC.addConstrs((y[i,l]-y[i,j]+M*x[i,j,l]>= p[i][j] for i in machines for j in jobs for l in jobs if j!=l))\n",
    "PwC.addConstr((y[2,0]-y[0,0]>=3))\n",
    "PwC.addConstr((y[1,0]-y[2,0]>=8))\n",
    "PwC.addConstr((y[2,1]-y[1,1]>=4))\n",
    "PwC.addConstr((y[0,1]-y[2,1]>=11))\n",
    "PwC.addConstr((y[1,2]-y[2,2]>=8))\n",
    "PwC.addConstr((y[0,2]-y[1,2]>=6))\n",
    "    \n",
    "# Optimize model\n",
    "PwC.optimize()\n",
    "PwC.write(\"PwT-seqIP.lp\")\n",
    "\n",
    "# print optimal solutions\n",
    "for v in PwC.getVars ():\n",
    "    print ('%s %g' % (v.varName , v.x))\n",
    "objective = PwC.getObjective()\n",
    "print(objective.getValue())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0fc42944",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
